% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bocoo_associate.R
\name{bocoo.associate}
\alias{bocoo.associate}
\title{bocoo_associate}
\usage{
bocoo.associate(
  inputData.list,
  bogen.out.list,
  plantList,
  useStandardCoolType = T,
  path_combogencoo_cool_type = NA,
  useStandardBogencoo.key = T
)
}
\arguments{
\item{inputData.list}{list object generated by the importThermoEIA::import_EIAData() function 
This data is pulled from the EIA website (https://www.eia.gov/electricity/) for the year 
of 2015 and has been run through the necessary formatting to be used by the EIAplantAssociation 
package.  inputData.list should be in the same format as the example `inputData.list2015` data
object.}

\item{bogen.out.list}{list object generated by the `executeBogenAssoc()` function containing
boiler-generator associations}

\item{plantList}{data.frame indicating which plants to include in the analysis.  Must contain 
the column "Plant.Code".  The `data("masterPlantList")` data object contains a list of recommended
plants for analysis for the years 2008-2020.}

\item{useStandardCoolType}{TRUE/FALSE indicating whether to use the `data("combogencoo_cool_type2015")`
data object as a starting point to assigning cooling types to boiler-generator-cooling (bogencoo)
associations.  If FALSE, user must provide a `path_combogencoo_cool_type` to a file in the same 
format as `data("combogencoo_cool_type2015")`.  Option to output user edited combogencoo_cool_type file
provided by the `manualBogenReplace()` function for future use in `bocoo.associate()`}

\item{path_combogencoo_cool_type}{character string indicating the path to a saved combogencoo_cool_type
file in *.csv format and structured exactly as the `data("combogencoo_cool_type2015")` object.}

\item{useStandardBogencoo.key}{TRUE/FALSE indicating whether to use the data("bogencoo.key2015") to
fill in boiler-generator-cooling associations for plants that do not report cooling associations in
`inputData.list$bocoo`.  Only boiler-generator-cooling associations with matching boiler-generator 
associations in `bogen.out.list$sheet3_key` will be used. If FALSE the user should expect many more 
manual bogencoos to evaluate.}
}
\value{
list object including "bogencoo.key" a data.frame of boiler-generator-cooling (bogencoo) 
associations, "manualBogencoo" a data.frame containing a list of all plants flagged for manual user
checks of the boiler-generator-cooling (bogencoo) associations and/or cooling type assignments, the
data.frames "combogencoo_cool_type" and "combogencoo_cool_type_nukes" which are simply the 
combogencoo_cool_type file split into non-nuclear plants (in combogencoo_cool_type) and nuclear plants 
(in combogencoo_cool_type_nukes).  Note that some plants have both nuclear and non-nuclear units and 
will appear in both data.frames.
}
\description{
Creates a list including a data.frame of boiler-generator-cooling (bogencoo) associations
using the `inputData.list$bocoo`, `inputData.list$gen_fuel_data`, `inputData.list$boilerFuelData`,
`inputData.list$cooling`,`bogen.out.list$sheet3_key`,combogencoo_cool_type (either `data("combogencoo_cool_type2015")`
or from file), `data(bogencoo.key2015)` and the `associate()` function. Also in the list, is 
a data.frame named "manualBogencoo" which contains a list of all plants flagged for manual user
checks of the boiler-generator-cooling (bogencoo) associations and/or cooling type assignments. 
Use the `compilePlantInfo_excel()` function to generate a useful file to evaluate and manually edit
bogencoo associations and/or cooling type assignments. The output list will also include 
"combogencoo_cool_type" and "combogencoo_cool_type_nukes" which is simply the combogencoo_cool_type
file split into non-nuclear plants (in combogencoo_cool_type) and nuclear plants in 
(combogencoo_cool_type_nukes).  Note that some plants have both nuclear and non-nuclear units and 
will appear in both data.frames.
}
\examples{
#set arguments
dest<-tempdir()
eia_year<-2015
path_InputData_Metafile<-paste0(dest,.Platform$file.sep,"UserControlCrosswalk2015.xlsx")
path_EIAInputData<-paste0(dest,.Platform$file.sep,eia_year)
outputCSV<-FALSE
path_outputCSV<-dest

#use crosswalk2015 object
useStandardCrosswalk<-TRUE
prepCondenserDuty<-TRUE

#pull data from web
importThermoEIA::eia_webpull(eia_year,dest)


#run import using crosswalk2015
inputData.list<-importThermoEIA::import_EIAData(path_InputData_Metafile,path_EIAInputData,outputCSV,
                              path_outputCSV,prepCondenserDuty = TRUE,eia_year=eia_year,
                              useStandardCrosswalk=useStandardCrosswalk)

#load MasterPlantList
utils::data("masterPlantList")
plantList<-masterPlantList[masterPlantList$year==eia_year,]

#run boiler-generator associations
bogen.out.list<-executeBogenAssoc(inputData_path,pathWrite,inputData.list,plantList,
                                 select_RPM=c("CA", "CS", "CT", "ST",NA), eia_year)

#run boiler-generator-cooling associations
bogencoo.key.list<-bocoo.associate(inputData.list,bogen.out.list,plantList=plantList)
}
